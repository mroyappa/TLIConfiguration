using System;
using System.IO;
using System.Xml;

/*
 * CLASS SUMMARY:	ExcelXml
 * 
 * ExcelXml is a custom class which provides methods to generate an XML document compatible with 
 * Microsoft Excel.
 * 
 */

namespace TLIConfiguration
{
	/// <summary>
	/// Summary description for ExcelXml.
	/// </summary>
	public class ExcelXml
	{
		private XmlTextWriter xmlOut = null;
		public string m_Exception = "";

		public static string STYLE_DEFAULT = "DFT";
		public static string STYLE_BOLD = "SHDG";
		public static string STYLE_BOLD_UL = "SMHDGB";
		public static string STYLE_ITALIC_UL = "SIL";
		public static string STYLE_UL = "SUL";

		#region Contructor, Desctructors
		/// <summary>
		/// 
		/// </summary>
		/// <param name="sFilename">Name of file to be written to</param>
		/// <param name="sCallingApplicationName">Name of Application Calling (Used In Xml Comments) </param>
		public ExcelXml(string sFilename, string sCallingApplicationName)
		{
			xmlOut = new XmlTextWriter(sFilename,null);

			try
			{
				xmlOut.Formatting = Formatting.Indented;
				xmlOut.WriteStartDocument(false);
				xmlOut.WriteComment("This file has been generated by " + sCallingApplicationName + " and is intended to be viewed by Microsoft Excel");
				
				// Workbook Declaration
				xmlOut.WriteStartElement("Workbook",null);
				xmlOut.WriteAttributeString("xmlns", null, "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:spreadsheet");
				xmlOut.WriteAttributeString("xmlns", "o", "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:office");
				xmlOut.WriteAttributeString("xmlns", "x", "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:excel");
				xmlOut.WriteAttributeString("xmlns", "ss", "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:spreadsheet");
				xmlOut.WriteAttributeString("xmlns", "html", "http://www.w3.org/2000/xmlns/","http://www.w3.org/TR/REC-html40");

				//Document Properties Declaration
				xmlOut.WriteStartElement("DocumentProperties",null);
				xmlOut.WriteAttributeString("xmlns", null, "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:office");
					xmlOut.WriteElementString("Author", sCallingApplicationName);
					xmlOut.WriteElementString("Created", DateTime.Now.ToString());
				xmlOut.WriteEndElement();

				//Office Docuement Settings Declaration
				xmlOut.WriteStartElement("OfficeDocumentSettings",null);
				xmlOut.WriteAttributeString("xmlns", null, "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:office");
					xmlOut.WriteStartElement("LocationOfComponents");
					xmlOut.WriteAttributeString("Href", "/");
					xmlOut.WriteEndElement();
				xmlOut.WriteEndElement();

				//Excel Workbook Declaration
				xmlOut.WriteStartElement("ExcelWorkbook",null);
				xmlOut.WriteAttributeString("xmlns", null, "http://www.w3.org/2000/xmlns/","urn:schemas-microsoft-com:office:excel");
					xmlOut.WriteElementString("WindowHeight", "12525");
					xmlOut.WriteElementString("WindowWidth", "15195");
					xmlOut.WriteElementString("WindowTopX", "480");
					xmlOut.WriteElementString("WindowTopY", "120");
					xmlOut.WriteElementString("ProtectStructure", "False");
					xmlOut.WriteElementString("ProtectWindows", "False");
				xmlOut.WriteEndElement();

				//GenerateStyleSheet
				StyleSheet();
			}
			catch (Exception e)
			{
				m_Exception = e.ToString();
			}
		}

		~ExcelXml ()
		{
			try
			{
				Close();
			}
			catch
			{
				// Close has already been executed
			}
		}

		/// <summary>
		/// Finalize Xml Tags And Write To File
		/// </summary>
		public void Close()
		{
			// Close Workbook
			xmlOut.WriteEndElement();
			
			xmlOut.Flush();
			xmlOut.Close();
		}
		#endregion


		#region WorkSheet Definitions
		public void NewWorkSheet (string sWorksheetName)
		{
			xmlOut.WriteStartElement("Worksheet",null);
			xmlOut.WriteAttributeString("ss:Name", sWorksheetName); //Start New Workbook
			xmlOut.WriteStartElement("Table",null);  //Add Table To New Workbook
		}

		public void EndWorkSheet()
		{
			xmlOut.WriteEndElement();  // Close Table
			xmlOut.WriteEndElement();  // Close Worksheet
		}
		#endregion


		#region Row Definitions
		public void NewRow()
		{
			xmlOut.WriteStartElement("Row",null);
		}

		public void EndRow()
		{
			xmlOut.WriteEndElement();
		}

		public void AddEmptyRow()
		{
			NewRow();
			EndRow();
		}
		#endregion


		#region Cell Definitions
		/// <summary>
		/// Generate Cell
		/// </summary>
		/// <param name="sCellValue"></param>
		/// <param name="sDataType">Type of data to be entered in cell ie "String", "Number"</param>
		/// <param name="sStyleID">Name of predefined style ie "Default", "RedBackWhiteFont", RedNegativeNumbers</param>
		public void AddCell(string sCellValue, string sDataType, string sStyleID)
		{
			xmlOut.WriteStartElement("Cell", null);
			xmlOut.WriteAttributeString("ss:StyleID", sStyleID);
				xmlOut.WriteStartElement("Data",null);
				xmlOut.WriteAttributeString("ss:Type", sDataType);
				xmlOut.WriteString(sCellValue);
				xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();				
		}

		/// <summary>
		/// Generate text cell
		/// </summary>
		/// <param name="sCellValue"></param>
		/// <param name="sStyleID">Name of predefined style ie "Default", "RedBackWhiteFont", RedNegativeNumbers</param>
		public void AddTextCell(string sCellValue) { AddTextCell(sCellValue, "DFT"); }
		public void AddTextCell(string sCellValue, string sStyleID)
		{
			xmlOut.WriteStartElement("Cell", null);
			xmlOut.WriteAttributeString("ss:StyleID", sStyleID);
			xmlOut.WriteStartElement("Data",null);
			xmlOut.WriteAttributeString("ss:Type", "String");
			xmlOut.WriteString(sCellValue);
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();	
		}

		/// <summary>
		/// Generate numeric cell
		/// </summary>
		/// <param name="sCellValue"></param>
		/// <param name="sStyleID">Name of predefined style ie "Default", "RedBackWhiteFont", "RedNegativeNumbers"</param>
		public void AddNumericCell(string sCellValue, string sStyleID)
		{
			xmlOut.WriteStartElement("Cell", null);
			xmlOut.WriteAttributeString("ss:StyleID", sStyleID);
			xmlOut.WriteStartElement("Data",null);
			xmlOut.WriteAttributeString("ss:Type", "Number");
			xmlOut.WriteString(sCellValue);
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();	
		}

		/// <summary>
		/// Generate formula cell
		/// </summary>
		/// <param name="sFormula"></param>
		public void AddFormulaCell(string sFormula, string sStyleID)
		{
			xmlOut.WriteStartElement("Cell", null);
			xmlOut.WriteAttributeString("ss:Formula", sFormula);
				xmlOut.WriteStartElement("Data",null);
				xmlOut.WriteAttributeString("ss:Type",sStyleID);
				xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
		}
		#endregion


		#region StyleSheet
		private void StyleSheet()
		{
			xmlOut.WriteStartElement("Styles", null);

			//Default Cell Style
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "DFT");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Alignment", null);
			xmlOut.WriteAttributeString("ss:Vertical", "Bottom");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Report Heading Cell Style HDG
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "HDG");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Size", "12");
			xmlOut.WriteAttributeString("ss:Bold", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Report Small Heading Cell Style SMHDG
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "SHDG");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Bold", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Report Small Heading Bold Underline SMHDGB
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "SMHDGB");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Bold", "1");
			xmlOut.WriteAttributeString("ss:Underline", "Single");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Report Style Italic Underline
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "SIL");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Italic", "1");
			xmlOut.WriteAttributeString("ss:Underline", "Single");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Report Style Underline
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "SUL");
			xmlOut.WriteAttributeString("ss:name", "Normal");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Underline", "Single");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Center Justified Cell	(Center)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "Center");
			xmlOut.WriteStartElement("Alignment", null);
			xmlOut.WriteAttributeString("ss:Horizontal", "Center");
			xmlOut.WriteAttributeString("ss:Vertical", "Bottom");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Left Border
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "LeftBorder");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Right Border
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "RightBorder");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Top Border
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TopBorder");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Bottom Border
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "BB");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Thin Border Cell (TBC)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TBC");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();


			//Thick Bottom Cell (TBTM)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TBTM");
			xmlOut.WriteStartElement("Font", null);
			xmlOut.WriteAttributeString("ss:Bold", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Thick Top Cell (TTOP)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TTOP");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Thick Side Borders (TSB)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TSB");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Thick Top and Bottom (TTB)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TTB");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Top Left Border (TLB)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TLB");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Top Right Border (TRB)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TRB");
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Red Negative Numbers (RNN)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "RNN");
			xmlOut.WriteStartElement("NumberFormat", null);
			xmlOut.WriteAttributeString("ss:Format", "0;[Red]" + Convert.ToChar(92) + "(0" + Convert.ToChar(92) + ")");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			//Thick Side Borders Red Negative Numbers (TSBRNN)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "TSBRNN");
			xmlOut.WriteStartElement("NumberFormat", null);
			xmlOut.WriteAttributeString("ss:Format", "0;[Red]" + Convert.ToChar(92) + "(0" + Convert.ToChar(92) + ")");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "2");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			// Red Negative Numbers Thin Borders (RNNTB)
			xmlOut.WriteStartElement("Style", null);
			xmlOut.WriteAttributeString("ss:ID", "RNNTB");
			xmlOut.WriteStartElement("NumberFormat", null);
			xmlOut.WriteAttributeString("ss:Format", "0;[Red]" + Convert.ToChar(92) + "(0" + Convert.ToChar(92) + ")");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Borders", null);
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Top");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Bottom");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Left");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteStartElement("Border", null);
			xmlOut.WriteAttributeString("ss:Position", "Right");
			xmlOut.WriteAttributeString("ss:LineStyle", "Continuous");
			xmlOut.WriteAttributeString("ss:Weight", "1");
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();
			xmlOut.WriteEndElement();

			xmlOut.WriteEndElement();
		}
		#endregion		

	}
}
