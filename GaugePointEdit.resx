<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTipProvider.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="cboGaugeNumber.ToolTip" xml:space="preserve">
    <value>Ordinal value used to differentiate between different gauges of the same type that are defined for an equipment unit.
When used with temperature, gauge number is used to indicate the relative position of the sensor.</value>
  </data>
  <data name="cboGaugeType.ToolTip" xml:space="preserve">
    <value>Type of gauging to be performed.

Average Temperature -		A summary gauge used to aggregate an average temperature of all 
				active temperature gauges.  This gauge is added automatically whenever a temperature gauge 
				is added to an equipment unit.

Channel State Alarm Monitor -	Used to monitor for channel state alarms such as "Channel Alarm Red" 
				associated with an overfill or high level AMU.

Level -				Gauge Type used to collect a tank's level or the vessel's draft.

List -				Used to monitor a pressure sensor.

Pressure -			Gauge Type to monitor a pressure sensor.

Temperature -			Gauge Type to monitor a temperature sensor.

Ullage -				Gauge Type used to collect a tank's ullage.
</value>
  </data>
  <data name="txtEngineeringMin.ToolTip" xml:space="preserve">
    <value>The minimum converted value of the raw data.  

Note:  This value is to be specified in the same units specified for Gauging Units unless
when using a TAU then this value will be a metric value based on Channel Type (see TAU ICD for more information).</value>
  </data>
  <data name="txtDigitalFilter.ToolTip" xml:space="preserve">
    <value>Enables a simple digital filter algorithm.  When a value of 0 or 1 is specified, no digital filtering is applied.  Any value greater 
than one will cause a digital filter where X number of raw values are averaged together and used as the raw value.</value>
  </data>
  <data name="txtEngineeringMax.ToolTip" xml:space="preserve">
    <value>The maximum converted value of the raw data.  

Note:  This value is to be specified in the same units specified for Gauging Units unless
when using a TAU then this value will be a metric value based on Channel Type (see TAU ICD for more information).</value>
  </data>
  <data name="txtRawDeadband.ToolTip" xml:space="preserve">
    <value>The amount of raw data change needed for a value change to be reported to the user interface.  

Note:  A 0.1% deadband is applied to all gauges, if a larger deadband is needed, specify a greater Raw Deadband.</value>
  </data>
  <data name="cboMODBUBAddress.AccessibleDescription" xml:space="preserve">
    <value>					gp.AMUEnable = chkIOEnable.Checked;
					gp.AMUAddress = Convert.ToInt32(cboIOAddress.Items[cboIOAddress.SelectedIndex]);
					gp.AMUChannel = Convert.ToInt32(cboIOChannel.Items[cboIOChannel.SelectedIndex]);
					gp.AMUAnalogChannel = chkAnalogChannel.Checked;</value>
  </data>
  <data name="cboTAUAddress.AccessibleDescription" xml:space="preserve">
    <value>					gp.AMUEnable = chkIOEnable.Checked;
					gp.AMUAddress = Convert.ToInt32(cboIOAddress.Items[cboIOAddress.SelectedIndex]);
					gp.AMUChannel = Convert.ToInt32(cboIOChannel.Items[cboIOChannel.SelectedIndex]);
					gp.AMUAnalogChannel = chkAnalogChannel.Checked;</value>
  </data>
  <data name="cboAMUAddress.AccessibleDescription" xml:space="preserve">
    <value>					gp.AMUEnable = chkIOEnable.Checked;
					gp.AMUAddress = Convert.ToInt32(cboIOAddress.Items[cboIOAddress.SelectedIndex]);
					gp.AMUChannel = Convert.ToInt32(cboIOChannel.Items[cboIOChannel.SelectedIndex]);
					gp.AMUAnalogChannel = chkAnalogChannel.Checked;</value>
  </data>
  <metadata name="openFileDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>143, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAGABoAwAAFgAAACgAAAAQAAAAIAAAAAEAGAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAACQkJB2dnYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACnp6fDw8Pd3d2bm5sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLi4vx8fH/
        ///m5uaIiIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDg4Ovr6/////////i4uKOjo4A
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZmZnKysr///////+zs7OxsbEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBgYH39/f////p6emampoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAACqqqrHx8f///////+WlpYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACrq6v///////+jo6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABubm6Hh4exsbGq
        qqoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWlpZlZWWOjo63t7eampoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtbW1zc3OamprCwsKNjY0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACWlpZra2uEhISpqanAwMC0tLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCgoK9vb33
        9/e/v7+9vb2VlZUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACKior9/f3////h4eGFhYUAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFhYXk5OTX19eTk5MAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAACKiop9fX0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8/wAA+H8AAPg/
        AAD4HwAA/A8AAP4PAAD+DwAA/w8AAP8PAAD+DwAA/g8AAPwPAAD4HwAA+D8AAPh/AAD8/wAA
</value>
  </data>
</root>