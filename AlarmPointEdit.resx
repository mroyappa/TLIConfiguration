<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="cboAlarmType.ToolTip" xml:space="preserve">
    <value>Alarm classification which causes the UI to display the alarm on the UI.

Alarm -		Creates a general alarm.

High Alarm -	Creates a high alarm, if selected for an analog value, it will cause the high alarm (red)
		indicator to be drawn on the faceplate bar graph.

High Warning -	Create a high warning, if selected for an analog value, it will cause the high warning
		(orange) indicator to be drawn on the faceplate bar graph.

Low Alarm -	Creates a low alarm, if selected for an analog value, it will cause the low alarm (dark blue)
		indicator to be drawn on the faceplate bar graph.

Low Warning -	Creates a low warning, if selected for an analog value, it will cause the low warning (light blue)
		indicator to be drawn on the faceplate bar graph.

Warning -	Creates a general warning.
</value>
  </data>
  <data name="cboAlarmMonitorType.ToolTip" xml:space="preserve">
    <value>Type of alarm evaluation to be performed.

Analog Value -		Used to monitor the analog value of a gauge point.

Channel State Alarm -	Used along with the Channel State Alarm Monitor gauge type to sound 
			an alarm whrn an AMU channel state indicates an alarmed condition.

Channel Condition -	Used to monitor an I/O channel for a channel condition which would require
			attention (i.e., Cable Break or Cable Short).

Digital Value - 		Used to monitor a digital value of a gauge point.

Sounding -		Used to monitor the sounding lookup value of a gauge point.
</value>
  </data>
  <data name="txtDebounceTimer.ToolTip" xml:space="preserve">
    <value>Amount of time (in milliseconds) that the gauge point must be in alarm before the alarm is sounded.  

Note:  A default 2500ms debounce timer is applied to all alarms.  If more time is required then a value will need to be specified.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAGABoAwAAFgAAACgAAAAQAAAAIAAAAAEAGAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAA
        AABjY8YTE7YbG79WVtQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXF6UPD7gP
        D7sVFb0wMMVkZNkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoaLwNDaQPD7MNDbcXF9saGrsK
        CnQTE5lQUMkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDJkODq4MDLoZGeAaGokFBTUQEHYLC5QMDLIo
        KLx+ftYAAAAAAAAAAAAAAAAAAAALC4oPD6sQEMEODsULC7AKCokJCW4QEJYQEKoKCpoLC5siIqUAAAAA
        AAAAAAAAAAAKCoQNDZoODrQPD8IREdkSEuUPD98XF+EgINYYGMEQEK4NDaQODqBLS8EAAAAAAAAKCoEL
        C5MODqwQELoQEMkODtsREe4SEvATE+8YGPEYGOwrK+kAAAAAAAAAAABNTaUKCoALC40ODqUQELwICNMo
        KOp5efdvb/MkJO0TE+wlJe8AAAAAAAAAAAAAAAAuLpQKCoMNDZwPD7EPD78DA9M5Oe2jo/mTk/Y1Ne4b
        G+sAAAAAAAAAAAAAAAAAAAAtLZQKCosODqoQEMENDdIICOBOTvCgoPhcXPIYGOtLS+4AAAAAAAAAAAAA
        AAAAAAA1NZgLC40NDawREcQGBtgaGuyHh/ihofZCQu8aGuyKivUAAAAAAAAAAAAAAAAAAABycrsLC5UO
        DqwMDMMEBNpFRfGurvuHh/UrK+0sLOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAREaMPD7QLC8sKCuFlZfWo
        qPhSUvAaGuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQELoODs4QEOQpKe43N+4kJO19ffQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqKs0sLN45Oe5gYPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABzc94AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/wAAgf8AAIA/
        AADABwAAwAMAAMAAAADAAwAAgAcAAIAPAACADwAAgA8AAIAfAADAPwAA4D8AAPD/AAD3/wAA
</value>
  </data>
</root>